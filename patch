--- ../default/Include/picklebufobject.h	2019-01-15 15:04:00.819294529 +0100
+++ pickle5/picklebufobject.h	2019-01-15 15:16:13.142074250 +0100
@@ -10,18 +10,18 @@
 
 #ifndef Py_LIMITED_API
 
-PyAPI_DATA(PyTypeObject) PyPickleBuffer_Type;
+extern PyTypeObject PyPickleBuffer_Type;
 
 #define PyPickleBuffer_Check(op) (Py_TYPE(op) == &PyPickleBuffer_Type)
 
 /* Create a PickleBuffer redirecting to the given buffer-enabled object */
-PyAPI_FUNC(PyObject *) PyPickleBuffer_FromObject(PyObject *);
+PyObject *PyPickleBuffer_FromObject(PyObject *);
 /* Get the PickleBuffer's underlying view to the original object
  * (NULL if released)
  */
-PyAPI_FUNC(const Py_buffer *) PyPickleBuffer_GetBuffer(PyObject *);
+const Py_buffer *PyPickleBuffer_GetBuffer(PyObject *);
 /* Release the PickleBuffer.  Returns 0 on success, -1 on error. */
-PyAPI_FUNC(int) PyPickleBuffer_Release(PyObject *);
+int PyPickleBuffer_Release(PyObject *);
 
 #endif /* !Py_LIMITED_API */
 
--- ../default/Objects/picklebufobject.c	2019-01-15 15:08:06.366713656 +0100
+++ pickle5/picklebufobject.c	2019-01-15 15:16:13.142074250 +0100
@@ -4,6 +4,8 @@
 #include "Python.h"
 #include <stddef.h>
 
+#include "picklebufobject.h"
+
 typedef struct {
     PyObject_HEAD
     /* The view exported by the original object */
--- ../default/Modules/_pickle.c	2019-01-15 15:04:27.099637426 +0100
+++ pickle5/_pickle.c	2019-01-15 15:31:55.027138489 +0100
@@ -1,4 +1,7 @@
 
+#include "compat.h"
+#include "picklebufobject.h"
+
 /* Core extension modules are built-in on some platforms (e.g. Windows). */
 #ifdef Py_BUILD_CORE
 #define Py_BUILD_CORE_BUILTIN
@@ -703,7 +706,13 @@
 static PyTypeObject Pickler_Type;
 static PyTypeObject Unpickler_Type;
 
+#if PY_VERSION_HEX < 0x03070000
+#include "clinic/_pickle-3.6.c.h"
+#elif PY_VERSION_HEX < 0x03080000
+#include "clinic/_pickle-3.7.c.h"
+#else
 #include "clinic/_pickle.c.h"
+#endif
 
 /*************************************************************************
  A custom hashtable mapping void* to Python ints. This is used by the pickler
@@ -7781,11 +7790,25 @@
     return NULL;
 }
 
+static PyObject*
+make_memoryview_readonly(PyObject *self, PyObject *arg)
+{
+    if (!PyMemoryView_Check(arg)) {
+        PyErr_Format(PyExc_TypeError,
+                     "_make_memoryview_readonly() argument must be memoryview");
+        return NULL;
+    }
+    PyMemoryViewObject *mv = (PyMemoryViewObject *) arg;
+    mv->view.readonly = 1;
+    Py_RETURN_NONE;
+}
+
 static struct PyMethodDef pickle_methods[] = {
     _PICKLE_DUMP_METHODDEF
     _PICKLE_DUMPS_METHODDEF
     _PICKLE_LOAD_METHODDEF
     _PICKLE_LOADS_METHODDEF
+    {"_make_memoryview_readonly", make_memoryview_readonly, METH_O},
     {NULL, NULL} /* sentinel */
 };
 
@@ -7869,6 +7892,8 @@
     Py_INCREF(&Unpickler_Type);
     if (PyModule_AddObject(m, "Unpickler", (PyObject *)&Unpickler_Type) < 0)
         return NULL;
+    if (PyType_Ready(&PyPickleBuffer_Type) < 0)
+        return NULL;
     Py_INCREF(&PyPickleBuffer_Type);
     if (PyModule_AddObject(m, "PickleBuffer",
                            (PyObject *)&PyPickleBuffer_Type) < 0)
--- ../default/Lib/pickle.py	2019-01-15 15:04:00.899295573 +0100
+++ pickle5/pickle.py	2019-01-15 15:16:13.146074308 +0100
@@ -36,7 +36,7 @@
 import codecs
 import _compat_pickle
 
-from _pickle import PickleBuffer
+from ._pickle import PickleBuffer, _make_memoryview_readonly
 
 __all__ = ["PickleError", "PicklingError", "UnpicklingError", "Pickler",
            "Unpickler", "dump", "dumps", "load", "loads", "PickleBuffer"]
@@ -546,7 +546,11 @@
             rv = reduce(obj)
         else:
             # Check for a class with a custom metaclass; treat as regular class
-            if issubclass(t, type):
+            try:
+                issc = issubclass(t, type)
+            except TypeError: # t is not a class (old Boost; see SF #502085)
+                issc = False
+            if issc:
                 self.save_global(obj)
                 return
 
@@ -1361,7 +1365,9 @@
         buf = self.stack[-1]
         with memoryview(buf) as m:
             if not m.readonly:
-                self.stack[-1] = m.toreadonly()
+                mm = memoryview(buf)
+                _make_memoryview_readonly(mm)
+                self.stack[-1] = mm
     dispatch[READONLY_BUFFER[0]] = load_readonly_buffer
 
     def load_short_binstring(self):
@@ -1714,7 +1720,7 @@
 
 # Use the faster _pickle if possible
 try:
-    from _pickle import (
+    from ._pickle import (
         PickleError,
         PicklingError,
         UnpicklingError,
--- ../default/Lib/pickletools.py	2019-01-15 15:04:27.119637687 +0100
+++ pickle5/pickletools.py	2019-01-15 15:16:13.146074308 +0100
@@ -12,10 +12,11 @@
 
 import codecs
 import io
-import pickle
 import re
 import sys
 
+from . import pickle
+
 __all__ = ['dis', 'genops', 'optimize']
 
 bytes_types = pickle.bytes_types
--- ../default/Lib/test/pickletester.py	2019-01-15 15:04:00.919295834 +0100
+++ pickle5/test/pickletester.py	2019-01-15 15:16:13.146074308 +0100
@@ -3,8 +3,6 @@
 import dbm
 import io
 import functools
-import pickle
-import pickletools
 import struct
 import sys
 import unittest
@@ -17,7 +15,8 @@
     _2G, _4G, bigmemtest,
     )
 
-from pickle import bytes_types
+import pickle5 as pickle
+from pickle5 import pickletools, bytes_types
 
 requires_32b = unittest.skipUnless(sys.maxsize < 2**32,
                                    "test is only meaningful on 32-bit builds")
@@ -1302,12 +1301,11 @@
     # of 1.
     def dont_test_disassembly(self):
         from io import StringIO
-        from pickletools import dis
 
         for proto, expected in (0, DATA0_DIS), (1, DATA1_DIS):
             s = self.dumps(self._testdata, proto)
             filelike = StringIO()
-            dis(s, out=filelike)
+            pickletools.dis(s, out=filelike)
             got = filelike.getvalue()
             self.assertEqual(expected, got)
 
--- ../default/Lib/test/test_pickle.py	2019-01-15 15:04:27.107637529 +0100
+++ pickle5/test/test_pickle.py	2019-01-15 15:16:13.146074308 +0100
@@ -1,7 +1,6 @@
 from _compat_pickle import (IMPORT_MAPPING, REVERSE_IMPORT_MAPPING,
                             NAME_MAPPING, REVERSE_NAME_MAPPING)
 import builtins
-import pickle
 import io
 import collections
 import struct
@@ -11,17 +10,18 @@
 import unittest
 from test import support
 
-from test.pickletester import AbstractUnpickleTests
-from test.pickletester import AbstractPickleTests
-from test.pickletester import AbstractPickleModuleTests
-from test.pickletester import AbstractPersistentPicklerTests
-from test.pickletester import AbstractIdentityPersistentPicklerTests
-from test.pickletester import AbstractPicklerUnpicklerObjectTests
-from test.pickletester import AbstractDispatchTableTests
-from test.pickletester import BigmemPickleTests
+from .pickletester import AbstractUnpickleTests
+from .pickletester import AbstractPickleTests
+from .pickletester import AbstractPickleModuleTests
+from .pickletester import AbstractPersistentPicklerTests
+from .pickletester import AbstractIdentityPersistentPicklerTests
+from .pickletester import AbstractPicklerUnpicklerObjectTests
+from .pickletester import AbstractDispatchTableTests
+from .pickletester import BigmemPickleTests
 
+import pickle5 as pickle
 try:
-    import _pickle
+    from pickle5 import _pickle
     has_c_implementation = True
 except ImportError:
     has_c_implementation = False
@@ -205,7 +205,7 @@
 
 if has_c_implementation:
     class CPickleTests(AbstractPickleModuleTests):
-        from _pickle import dump, dumps, load, loads, Pickler, Unpickler
+        from pickle5._pickle import dump, dumps, load, loads, Pickler, Unpickler
 
     class CUnpicklerTests(PyUnpicklerTests):
         unpickler = _pickle.Unpickler
@@ -508,7 +508,8 @@
                       PyPicklerUnpicklerObjectTests,
                       CPicklerUnpicklerObjectTests,
                       CDispatchTableTests, CChainDispatchTableTests,
-                      InMemoryPickleTests, SizeofTests])
+                      InMemoryPickleTests, SizeofTests
+                      ])
     support.run_unittest(*tests)
     support.run_doctest(pickle)
 
